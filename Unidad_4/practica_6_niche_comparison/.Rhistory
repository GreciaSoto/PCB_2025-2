area_calibration_merge <- merge(area_calibration, area_calibration_formosa)
plot(area_calibration_merge)
#merge
area_calibration_merge <- raster::merge(area_calibration, area_calibration_formosa)
plot(area_calibration_merge)
plot(area_calibration_merge)
#merge
area_calibration_merge <- raster::merge(area_calibration, area_calibration_formosa)
#merge
area_calibration_merge <- union(area_calibration, area_calibration_formosa)
#merge
area_calibration_merge <- raster::union(area_calibration, area_calibration_formosa)
plot(area_calibration_merge)
# cut all layers with total area calibration
area_calibration_stack_merge <- crop(wlclim.subset.vars , extent(area_calibration_merge))
plot(wlclim.subset.vars[[1]])
area_calibration_stack_mask_merge <- mask(area_calibration_stack_formosa, area_calibration_merge)
plot(area_calibration_merge)
# cut all layers with total area calibration
area_calibration_stack_merge <- crop(wlclim.subset.vars , extent(area_calibration_merge))
plot(wlclim.subset.vars[[1]])
plot(area_calibration_merge)
library(raster)
library(ntbox)
library(ellipsenm)
library(rgdal)
library(sp)
# cut all layers with total area calibration
area_calibration_stack_merge <- crop(wlclim.subset.vars , extent(area_calibration_merge))
plot(wlclim.subset.vars[[1]])
area_calibration_stack_mask_merge <- mask(area_calibration_stack_formosa, area_calibration_merge)
plot(area_calibration_merge)
plot(area_calibration_stack_merge[[1]])
area_calibration_stack_mask_merge <- mask(area_calibration_stack_formosa, area_calibration_merge)
plot(area_calibration_stack_mask_merge)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
variable_sets
plot (variable_sets[[1]])
variable_sets <- prepare_sets(area_calibration_stack_mask_merge[[1]][[1:4]], sets)
pca_vars_6
##
#PCA for 6 vars
pca_vars <- spca(area_calibration_stack_mask_merge)
pca_vars
plot(pca_vars[[1]])
variable_sets <- prepare_sets(pca_vars[[1]][[1:4]], sets)
plot (variable_sets[[1]])
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
variable_sets
formosa.data.split
variable_sets
methods
variable_sets <- prepare_sets(pca_vars[[1]][[1:4]], sets)
plot (variable_sets[[1]])
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[1:25, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[1:15, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[1:5, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[10:50, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[50:70, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[60:80, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[70:90, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[71:90, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[75:90, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[70:85, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[71:85, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# Preparing training and testing data
#Read csv
presences_sp_formosa <- read.csv("database/formosa_20km.csv")
presences_sp_df_formosa <- as.data.frame(presences_sp_formosa)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[71:85, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[171:185, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[173:185, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa[178:185, ], method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa, method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
#Spatial points
formosa_occur_spdf <- SpatialPoints(presences_sp_df_formosa)
presences_sp_df_formosa[1:50]
#Spatial points
formosa_occur_spdf <- SpatialPoints(presences_sp_df_formosa[,2:3])
# Establecer el sistema de referencia
CRS.new<-CRS("+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
# Asignar ese sistema a los puntos
proj4string(pmorio_occur_spdf)<-CRS.new
# Asignar ese sistema a los puntos
proj4string(formosa_occur_spdf)<-CRS.new
plot(formosa_occur_spdf)
plot(area_calibration_stack_mask_merge)
plot(area_calibration_stack_mask_merge[[1]])
plot(formosa_occur_spdf, add=T)
plot(area_calibration_stack_mask_merge[[1]])
plot(formosa_occur_spdf, add=T)
extract(formosa_occur_spdf,area_calibration_stack_mask_merge[[1]] )
extract(area_calibration_stack_mask_merge[[1]], formosa_occur_spdf )
tabla_values <- extract(area_calibration_stack_mask_merge[[1]], formosa_occur_spdf )
tabla_values
tabla_values_na <-  which(is.na(tabla_values))
tabla_values_na
presences_sp_df_formosa_na <- presences_sp_df_formosa[-c(tabla_values_na) , ]
presences_sp_df_formosa_na
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa_na, method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
# Methods
methods <- c("covmat", "mve1")
sets <- list(set_1 = c("PC1", "PC2", "PC3"),
set_2 = c("PC1", "PC2", "PC4")) # change as needed
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
##
#formosa
formosa.data.split$train
formosa.extract.pca <- raster::extract(pca_vars_6[[1]][[1:3]], formosa.data.split$train[ , c( "Longitude", "Latitude")])
formosa.extract.pca <-na.omit(formosa.extract.pca)
niche_sub <- ntbox::cov_center(formosa.extract.pca, mve = T,
level = 0.95,vars = c(1,2,3))
formosa_niche_geography <- ntbox::ellipsoidfit(envlayers = pca_vars_6$pc_layers[[c(1,2,3)]],
centroid = niche_sub$centroid,
covar = niche_sub$covariance, size=1)
plot(formosa_niche_geography$suitRaster)
niche_formosa <- ntbox::cov_center(formosa.extract.pca, mve = T,
level = 0.95,vars = c(1,2,3))
formosa_niche_geography <- ntbox::ellipsoidfit(envlayers = pca_vars$pc_layers[[c(1,2,3)]],
centroid = niche_formosa$centroid,
covar = niche_formosa$covariance, size=1)
plot(formosa_niche_geography$suitRaster)
pca_vars_6[[1]][[1:3]]
formosa.extract.pca <- raster::extract(pca_vars[[1]][[1:3]], formosa.data.split$train[ , c( "Longitude", "Latitude")])
formosa.extract.pca <-na.omit(formosa.extract.pca)
niche_formosa <- ntbox::cov_center(formosa.extract.pca, mve = T,
level = 0.95,vars = c(1,2,3))
formosa_niche_geography <- ntbox::ellipsoidfit(envlayers = pca_vars$pc_layers[[c(1,2,3)]],
centroid = niche_formosa$centroid,
covar = niche_formosa$covariance, size=1)
plot(formosa_niche_geography$suitRaster)
pca_vars
formosa_niche_geography <- ntbox::ellipsoidfit(envlayers = pca_vars$pc_layers,
centroid = niche_formosa$centroid,
covar = niche_formosa$covariance, size=1)
formosa_niche_geography <- ntbox::ellipsoidfit(envlayers = pca_vars$pc_layers[[c(1,2,3)]],
centroid = niche_formosa$centroid,
covar = niche_formosa$covariance, size=1)
plot(formosa_niche_geography$suitRaster)
plot(formosa_niche_geography$suitRaster)
plot(area_calibration_stack_mask_merge)
colliei.niche.pca <- ellipsenm::overlap_object(colliei.data.split$train[ ,c(22,1,2)],
species =  "area_m",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = pca_vars_6$pc_layers[[1:3]])
calib_formosa <- ellipsoid_calibration(formosa.data.split, species = "Species", longitude = "Longitude",
latitude = "Latitude", variables = variable_sets,
methods = methods, level = 99, selection_criteria = "S_OR_P",
error = 5, iterations = 500, percentage = 50,
output_directory = "formosa_calibration_results", overwrite = TRUE)
#Object
calib_formosa
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train[ ,c(22,1,2)],
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = pca_vars$pc_layers[[1:3]])
psilorhinus.data.split$train
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = pca_vars$pc_layers[[1:3]])
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = pca_vars_6$pc_layers[[1:3]])
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = pca_vars$pc_layers[[1:3]])
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = pca_vars$pc_layers[[1:3]])
# colliei - formosa
morio.formosa.overlap.pca <- ellipsenm::ellipsoid_overlap(morio.niche.pca,
colliei.niche.pca,
n_points = 1000000,
significance_test = TRUE,
replicates = 100,
confidence_limit = 0.05,
overlap_type = "all")
# colliei - formosa
morio.formosa.overlap.pca <- ellipsenm::ellipsoid_overlap(morio.niche.pca,
formosa.niche.pca,
n_points = 1000000,
significance_test = TRUE,
replicates = 100,
confidence_limit = 0.05,
overlap_type = "all")
# colliei - formosa
morio.formosa.overlap.pca <- ellipsenm::ellipsoid_overlap(morio.niche.pca,
formosa.niche.pca,
n_points = 1000000,
significance_test = TRUE,
replicates = 50,
confidence_limit = 0.05,
overlap_type = "all")
# reading data
occurrences <- read.csv(system.file("extdata", "occurrences.csv",
package = "ellipsenm"))
# raster layers of environmental data
vars <- raster::stack(list.files(system.file("extdata", package = "ellipsenm"),
pattern = "bio", full.names = TRUE))
# preparing data
vext <- raster::extent(vars)
ext1 <- raster::extent(vext[1], (mean(vext[1:2]) + 0.2), vext[3:4])
ext2 <- raster::extent((mean(vext[1:2]) + 0.2), vext[2], vext[3:4])
# croping variables and splitting occurrences
vars1 <- raster::stack(raster::crop(vars, ext1))
vars2 <- raster::stack(raster::crop(vars, ext2))
occurrences1 <- occurrences[occurrences$longitude < (mean(vext[1:2]) + 0.2),]
occurrences2 <- occurrences[!occurrences$longitude %in% occurrences1$longitude,]
# preparing overlap objects to perform analyses
niche1 <- overlap_object(occurrences1, species =  "species", longitude = "longitude",
latitude = "latitude", method = "covmat", level = 95,
variables = vars1)
niche2 <- overlap_object(occurrences2, species =  "species", longitude = "longitude",
latitude = "latitude", method = "covmat", level = 95,
variables = vars2)
# niche overlap analysis
overlap <- ellipsoid_overlap(niche1, niche2)
# niche overlap analysis with test of significance
overlap_st <- ellipsoid_overlap(niche1, niche2, overlap_type = "back_union",
significance_test = TRUE, replicates = 100)
Use the following lines of code for plotting results using distinct options.
# plotting only ellipsoids
plot_overlap(overlap)
# plotting ellispodis and background for full overlap
plot_overlap(overlap, background = TRUE, proportion = 0.6, background_type = "full")
# plotting ellispodis and background for overlap based on accessible environments
plot_overlap(overlap, background = TRUE,  proportion = 1, background_type = "back_union")
vars
plot(vars1)
plot(vars2)
plot(vars1)
plot(vars1)
plot(vars2, add=T)
plot(vars1[1])
plot(vars1[[1]])
plot(vars2[[1]], add=T)
plot(vars1[[1]])
plot(vars2[[1]], add=T)
plot(vars2[[3]], add=T)
plot(vars1[[1]])
plot(vars2[[3]], add=T)
plot(vars2[[3]], add=T)
plot(vars2[[3]], add=T)
plot(vars1[[1]])
plot(vars2[[3]], add=T)
plot(vars1[[1]])
plot(vars2[[3]])
plot(vars1[[1]])
plot(vars2[[3]])
vars
vars
wlclim.subset.vars
vars1
# cut all layers with total area calibration
area_calibration_stack_formosa <- crop(wlclim.subset.vars , extent(area_calibration_formosa))
plot(area_calibration_stack_formosa[[1]])
area_calibration_stack_mask_formosa <- mask(area_calibration_stack_formosa, area_calibration_formosa)
plot(area_calibration_stack_mask_formosa)
area_calibration_stack_mask_formosa
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
area_calibration_stack_mask_formosa
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
area_calibration_stack_mask_formosa <- stack(area_calibration_stack_mask_formosa)
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
plot(area_calibration)
plot(area_calibration_stack_mask)
#Objeto previo
psilorhinus.data.split
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa, method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
# Preparing training and testing data
#Read csv
presences_sp_formosa <- read.csv("database/formosa_20km.csv")
presences_sp_df_formosa <- as.data.frame(presences_sp_formosa)
# RAMDOMIZATION DO NOT REPEAT
formosa.data.split <- split_data(presences_sp_df_formosa, method = "random", longitude = "Longitude",
latitude = "Latitude", train_proportion = 0.80)
#Objeto previo
psilorhinus.data.split
# Overlap object
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
# Overlap object
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
# Overlap object
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask)
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
psilorhinus.data.split$train
psilorhinus.data.split$train
area_calibration_stack_mask
area_calibration_stack_mask_formosa
# Overlap object
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask)
formosa.niche.pca <- ellipsenm::overlap_object(formosa.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask_formosa)
area_calibration_stack_mask_formosa <- stack(area_calibration_stack_mask_formosa)
area_calibration_stack_mask
area_calibration_stack_mask <- stack(area_calibration_stack_mask)
# Overlap object
morio.niche.pca <- ellipsenm::overlap_object(psilorhinus.data.split$train,
species =  "Species",
longitude = "Longitude",
latitude = "Latitude", method = "covmat", level = 99,
variables = area_calibration_stack_mask)
# morio - formosa
morio.formosa.overlap.pca <- ellipsenm::ellipsoid_overlap(morio.niche.pca,
formosa.niche.pca,
n_points = 1000000,
significance_test = TRUE,
replicates = 50,
confidence_limit = 0.05,
overlap_type = "all")
# plotting only ellipsoids
plot_overlap(morio.formosa.overlap.pca)
# "full", measures overlap of the complete volume of the ellipsoidal niches.
# Interseccion en el contexto de la aproximacion al Nicho Fundamental
ellipsenm::plot_overlap(colliei.formosa.overlap.pca,
background = T,
background_type = "full",
proportion = 0.95)
# "full", measures overlap of the complete volume of the ellipsoidal niches.
# Interseccion en el contexto de la aproximacion al Nicho Fundamental
ellipsenm::plot_overlap(morio.formosa.overlap.pca,
background = T,
background_type = "full",
proportion = 0.95)
